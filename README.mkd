# Microsserviços Aplicados em Robótica Autonoma Móvel

O documento em questão descreve os passos necessários para executar a aplicação Web (inicializando os servidores HTTP) referente ao projeto de iniciação tecnológica. 

Com relação a aplicação web em si, é adotado como base o [projeto OSRM](https://project-osrm.org/), utiliza-se versões modificadas tanto do [frontend](https://github.com/Project-OSRM/osrm-frontend) quanto do [backend](https://github.com/Project-OSRM/osrm-backend) do projeto em questão.

É necessário ressaltar que todo os passos a seguir para este guia, foram executados em uma máquina virtual utilizando como sistema operacional o **Ubuntu 22.04LTS**, e com as seguintes configurações de hardware: 

  * OCPU de 2 núcleos 
  * 16 GB de memória RAM 
  * 128 GB de armazenamento
****
## Requisitos de software
É recomendado que os softwares utilizados estejam em sua versão mais recente, porém vou deixar na seção de cada software a versão utilizada na execução dessa aplicação.

|  Nome do software| Versão Utilizada| Instruções                                                                                                                                                                           |
|------------------|-----------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|       **git** |      2.34.1     |Para que se verifique a versão é utilizado o comando `git --version`, caso seja mostrado algo como `command not found`, significa que o git não está instalado, para instala-lo siga o [passo-a-passo do git](#guia-git).|
|   **kubectl** |    1.32.4       |Para verificação basta executar o comando  `kubectl version --client` no terminal. O retorno esperado é  algo como `Client Version: v1.32.4 Kustomize Version: v5.5.0`. Caso retorne algo como `Command 'kubectl' not found`, significa que não está instalado, para instala-lo siga o [passo-a-passo do kubectl](#guia-kubectl).                         |
|     **Docker**|   26.1.3        |Para verificação, utilizar o comando `docker --version` no terminal, a saída esperada para esse comando é algo parecido com `Docker version 26.1.3, build 26.1.3-0ubuntu1~22.04.1`. Caso seja mostrado algo como `Command 'docker' not found`, significa que o software não está instalado. Para instala-lo siga os passos do [guia de instalação Docker](#guia-docker).|
|      **k3d**|   5.8.3         |Para verificação, utilizar o comando `k3d version` no terminal, a saída esperada para este comando é  algo parecido com `k3d version v5.8.3 k3s version v1.31.5-k3s1 (default)`, caso seja mostrado `Command 'k3d' not found`, significa que o software não está instalado, portanto, para instala-lo siga os passos do [guia de instalação k3d](#guia-k3d).|



****
## Guias de instalação dos software de requisito

### Guia Git

1. **Atualizar lista de pacotes**  
   ```bash
   sudo apt update
   ```

2. **Instalar a versão estável via APT**  
   ```bash
   sudo apt install -y git
   ```
3. **Verificar a versão instalada**  
   ```bash
   git --version
   ```  
### Guia Kubectl

1. **Instalar dependências para repositório APT**  
   ```bash
   sudo apt update
   sudo apt install -y apt-transport-https ca-certificates curl
   ```

2. **Adicionar chave GPG do repositório Kubernetes**  
   ```bash
   sudo curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg \
     | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg
   sudo chmod 644 /etc/apt/keyrings/kubernetes-archive-keyring.gpg
   ```

3. **Adicionar repositório kubectl**  
   ```bash
   echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] \
     https://apt.kubernetes.io/ kubernetes-xenial main" \
     | sudo tee /etc/apt/sources.list.d/kubernetes.list
   sudo chmod 644 /etc/apt/sources.list.d/kubernetes.list
   ```

4. **Instalar o cliente kubectl**  
   ```bash
   sudo apt update
   sudo apt install -y kubectl
   ```

5. **Verificar versão**  
   ```bash
   kubectl version --client --short
   ```  

### Guia Docker

1. **Remover versões antigas (se houver)**  
   ```bash
   sudo apt remove -y docker docker-engine docker.io containerd runc
   ```

2. **Instalar dependências**  
   ```bash
   sudo apt update
   sudo apt install -y \
     apt-transport-https \
     ca-certificates \
     curl \
     gnupg \
     lsb-release
   ```

3. **Adicionar chave GPG oficial do Docker**  
   ```bash
   curl -fsSL https://download.docker.com/linux/ubuntu/gpg \
     | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
   ```

4. **Adicionar repositório Docker**  
   ```bash
   echo \
     "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] \
     https://download.docker.com/linux/ubuntu \
     $(lsb_release -cs) stable" \
     | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
   ```

5. **Instalar Docker Engine**  
   ```bash
   sudo apt update
   sudo apt install -y docker-ce docker-ce-cli containerd.io
   ```

6. **Permitir uso sem sudo (opcional)**  
   ```bash
   sudo usermod -aG docker $USER
   # depois, faça logout e login novamente
   ```

7. **Verificar instalação**  
   ```bash
   docker --version
   sudo systemctl status docker
   ```

### Guia k3d

1. **Pré-requisito: ter Docker instalado e em execução**  
   ```bash
   docker version
   ```

2. **Baixar e executar o script oficial de instalação**  
   ```bash
   curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh \
     | bash
   ```

3. **Verificar versão do k3d (e do k3s embutido)**  
   ```bash
   k3d version
   ```  
---
## Execução da aplicação
Com todos os softwares de pré-requisito devidamente instalados, para a execução da aplicação em si basta seguir os passos:

1. **Clonar o repositório GitHub**  
   ```bash
   git clone https://github.com/filipeparreira/Microsservicos-Aplicado-em-Robotica-Autonoma-Movel
   ```  

2. **Criar o cluster k3d, mapeando as portas que os serviços utilizam (5000, 9966), substitua o nome do cluster por um de sua escolha**  
   ```bash
   k3d cluster create {Nome do cluster} -p "5000:5000@loadbalancer" -p "9966:9966@loadbalancer"
   ```  

3. **Criar os serviços por meio do arquivo de configuração (YAML) presente no repositório**  
   ```bash
   kubectl create -f configuracao_servicos.yaml
   ```  

4. **Para acessar a página web basta utilizar o endereço `localhost:9966`**  










